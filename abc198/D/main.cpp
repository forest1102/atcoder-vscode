#include <bits/stdc++.h>
using namespace std;
#define FOR(i, l, r) for(size_t i = (l); i < (r); ++i)
#define rep(i, n) for(int i = 0; i < (int)(n); i++)
#define rrep(i, n) for(int i = (n)-1; i >= 0; --i)
#define rfor(v, vec) for(auto &v : (vec))
#define itrloop(itr, begin, end) for(auto itr = (begin); itr != end; ++itr)
#define crfor(v, vec) for(const auto &v : (vec))
#define all(x) x.begin(), x.end()
#define call(x) x.cbegin(), x.cend()
#define rall(x) x.rbegin(), x.rend()
#define ull unsigned long long
#define ll long long
#define ul unsigned long
template < typename F, typename T >
void permutation(std::vector< T > v, std::size_t n, F f) {
    std::vector< bool > bs(v.size() - n, false);
    bs.resize(v.size(), true);
    std::sort(v.begin(), v.end());

    do {
        std::vector< T > sub;
        for(std::size_t i = 0; i != bs.size(); ++i) {
            if(bs[i]) {
                sub.push_back(v[i]);
            }
        }
        do {
            if(f(sub))
                return;
        } while(std::next_permutation(sub.begin(), sub.end()));
    } while(std::next_permutation(bs.begin(), bs.end()));
}
// Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips:
// You use the default template now. You can remove this line by using your
// custom template)
int main() {
    std::vector< std::string > S(3);
    for(int i = 0; i < 3; i++) {
        std::cin >> S[i];
    }
    unordered_map< char, int > mp;
    {

        int cnt = 0;
        rep(i, 3) {
            rep(j, S[i].size()) {
                if(mp.find(S[i][j]) == mp.end()) {
                    mp[S[i][j]] = cnt++;
                }
            }
        }
    }
    if(mp.size() > 10) {
        cout << "UNSOLVABLE" << endl;
        return 0;
    }
    vector< int > range(10);
    rep(i, range.size()) range[i] = i;
    bool found = false;
    permutation(range, mp.size(), [&](const auto &perm) {
        ull num[3] = {};
        rep(i, 3) {
            ull d = 1;
            ull k = perm[mp[S[i][0]]];
            if(k == 0)
                return false;
            rrep(j, S[i].size()) {
                k = perm[mp[S[i][j]]];
                num[i] += k * d;
                d *= 10;
            }
        }
        if(num[0] + num[1] == num[2] && num[0] > 0 && num[1] > 0 &&
           num[2] > 0) {
            cout << num[0] << endl << num[1] << endl << num[2] << endl;
            return found = true;
        }
        return false;
    });
    if(!found)
        cout << "UNSOLVABLE" << endl;
    return 0;
}
